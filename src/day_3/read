1) 단일 상속 (single inheritance)
- 자바에서는 다중상속을 포기하고 단일 상속만을 허용한다
- 객체지향 언어 C++ 에선 다중상속의 장점을 이용하여 복합적인 기능을 가진 클래스를 쉽게 작성 가능
- 다중상속의 단점 : 클래스간의 관계가 매우 복잡,
                서로 다른 클래스로부터 상속받은 멤버간의 이름이 같은 경우 구별할 수 있는 방법이 없다.

- 단일상속의 장점 : 하나의 조상 클래스를 가질 수 있기 떄문에 클래스 간의 관계가 보다 명확해지고 코드를 더욱
                신뢰 할 수 있게 만들어줌



2) 오버라이딩
    1. 오버라이딩의 조건
        - 이름이 같아야 한다
        - 매개변수가 같아야 한다
        - 반환타입이 같아야 한다
        - 다만, 접근 제어자와 예외는 제한된 조건 하에서만 다르게 변경 가능
            - 접근자는 조상클래스의 메소드보다 좁은 범위로 변경 할 수 없다.
              접근 제어자의 접근 범위 넓은 순  : public, protected, (default), private
            - 조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다

    2. 오버로딩 vs 오버라이딩
        - 오버로딩 :  기존에 없는 새로운 메서드를 정의하는 것
        - 오버라이딩 : 상속받은 메서드의 내용을 변경하는 것

3) super()
    - 조상 클래스의 생성자
    - 생성자 this()는 같은 클래스의 다른 생성자를 호출하는데 사용
    - super()는 조상 클래스의 생성자를 호출하는데 사용
    - 생성자의 첫줄에 조상클래스의 생성자를 호출 > 자손 클래스의 멤버가 조상클래스의 맴버를 사용하기 전 먼저 초기화가 되어있어야 하므로
    - Object 클래스를 제외한 모든 클래스의 생성자 첫출에 생성자,this() 또는 super(),를 호출해야함
      그렇지 않으면 컴파일러가 자동적으로 super();를 생성자의 첫줄에 삽입



4) 접근 제어자(access modifier)
    - 사용 이유 ? 외부로부터 데이터를 보호하기 위해서
                외부에는 불필요한, 내부적으로 사용되는 부문을 감추기 위해


    static
    - static 초기화 블럭은 클래스가 메모리에 로드될 때 단 한번만 수행되며, 주로 클래스변수(static 변수)를 초기화하는데 주로 사용된다.


5) 다형성(polymorphism)
