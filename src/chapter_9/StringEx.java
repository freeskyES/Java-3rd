package chapter_9;

/**
 * String
 * - 변경 불가능한 (immutable) class
 * - 문자형 배열 변수(char[]) 를 인스턴스 변수로 정의해 놓음
 * - 한번 생성된 String 인스턴스가 갖고 있는 문자열은 읽어 올 수만 있고, 변경할 수는 없다
 * - + 연산자를 이용해 문자열을 결합하는 경우 인스턴스 내의 문자열이 바뀌는것이 아닌,
 *   새로운 문자열이 담긴 String 인스턴스가 생성되는 것이다.
 *   ** 덧셈 연산자를 사용해 문자열을 결합하는 것은 매 연산시 마다 새로운 문자열을 가진 String 인스턴스가 생성되어
 *   메모리공간을 차지하게 되므로, 많이 사용할경우 StringBuffer(저장된 문자열 변경 가능한) 클레스를 사용하는 것이 좋다.
 *
 * - 문자열의 비교
 *   문자열 만들 때, 1. 문자열 리터럴을 지정하는 방법
 *                2. String 클래스의 생성자를 사용해서 만드는 방법
 *
 *   문자열 리터럴 : 같은 내용의 문자열 리터럴은 한번만 저장된다.
 *   문자열 리터럴은 String 인스턴스이고, 한번 생성하면 내용을 변경할 수 없기에 하나의 인스턴스를 공유하면 되기 때문.
 *
 *   String 리터럴 들은 컴파일 시에 클래스 파일에 저장된다.
 *   예제 실행시, 같은 문자열을 담고있는 String 인스턴스가 하나 생성되고 , 참조변수들은 모두 이 String 인스턴스를 참조하게 된다.
 *
 *   클래스 파일에는 소스파일에 포함된 모든 리터럴의 목록이 있다.
 *   해당 클래스 파일이 클래스 로더에 의해 메모리에 올라갈 때, 이 리터럴의 목록에 있는 리터럴들이
 *   JVM 내에 있는 상수 저장소(constant pool)에 저장된다.
 *
 *
 */
public class StringEx {
    public static void main(String arg[]) {
        String s1 = "AAA";
        String s2 = "AAA";  // s1 과 s2 는 같은 String 인스턴스를 참조한다
        String s3 = "BBB";
    }

}
